from dataguzzler_python import dgpy
import spatialnde2 as snde

include(dgpy,"dgpy_startup.dpi") # If you get a NameError here, be sure you are executing this file with dataguzzler-python

include(dgpy,"Qt.dpi",prefer_pyqt=False) 

include(dgpy,"matplotlib.dpi")
include(snde,"recdb.dpi",enable_opencl=False) # false for the moment for faster startup
include(snde,"recdb_gui.dpi")


orient_dtype = [('offset', '<f4', (4,)), ('quat', '<f4', (4,))]

graphman=snde.graphics_storage_manager("/graphics/",recdb.lowlevel_alloc,recdb.alignment_requirements,recdb.lockmgr,1e-8);

transact = snde.active_transaction(recdb)


graphicsgroup = recdb.define_channel("/graphics","main",recdb.raw(),False,graphman)

plate_recordings = snde.x3d_load_geometry(recdb,graphman,"Plate_uv.x3d","main",recdb.raw(),"/graphics/plate/",None,True,True)


probe_recordings = snde.x3d_load_geometry(recdb,graphman,"Probe_uv.x3d","main",recdb.raw(),"/graphics/probe/",None,True,True)


main_viewer.viewer.set_camera_pose("/graphics/probe/x3d_meshed0",np.array(([0,0,.4,  0.        ], [ 0,0,0,  1]),dtype=[('offset', '<f4', (4,)), ('quat', '<f4', (4,))]))
main_viewer.viewer.set_rotation_center_dist("/graphics/probe/x3d_meshed0",0.4)


positioned_plate_chan = recdb.define_channel("/positioned_plate","main",recdb.raw())
snde.create_assembly_recording(recdb,positioned_plate_chan,recdb.raw(),
                               snde.VectorOfStringOrientationPairs([ ("/graphics/plate/x3d_meshed0",snde.snde_orientation3(np.array(((0,0,0,0),(.4, .3, .625, .6)),dtype=orient_dtype))) ])).mark_as_ready()


probe_positioner_chan = recdb.define_channel("/probe_positioner","main",recdb.raw())
probe_positioner_rec = snde.create_qt_osg_compositor_view_tracking_pose_recording(recdb,probe_positioner_chan,recdb.raw(),"/graphics/probe/x3d_meshed0","/positioned_plate",main_viewer.viewer.OSGWidget)
probe_positioner_rec.mark_as_ready()


main_viewer.viewer.set_camera_pose("/probe_positioner",np.array(([-0.27967322, -0.13708538,  0.31322557,  0.        ], [ 0.11939247, -0.3743305 , -0.03798857,  0.9187921 ]),dtype=[('offset', '<f4', (4,)), ('quat', '<f4', (4,))]))
main_viewer.viewer.set_rotation_center_dist("/probe_positioner",0.425)



# Add plate sub-channels
plate_trinormals = snde.trinormals.instantiate( [ snde.math_parameter_recording("/graphics/plate/x3d_meshed0") ],
                                               [ snde.shared_string("/graphics/plate/x3d_meshed0_trinormals") ],
                                               "/",
                                               False,
                                               False,
                                               False,
                                               snde.math_definition("trinormals"),
                                               None)
recdb.add_math_function(plate_trinormals,False)

plate_inplanemat = snde.inplanemat_calculation.instantiate( [ snde.math_parameter_recording("/graphics/plate/x3d_meshed0"),
                                                              snde.math_parameter_recording("/graphics/plate/x3d_meshed0_trinormals") ],
                                                            [ snde.shared_string("/graphics/plate/x3d_meshed0_inplanemat") ],
                                                            "/",
                                                            False,
                                                            False,
                                                            False,
                                                            snde.math_definition("inplanemat"),
                                                            None)
recdb.add_math_function(plate_inplanemat,False)



plate_projinfo = snde.projinfo_calculation.instantiate( [ snde.math_parameter_recording("/graphics/plate/x3d_meshed0"),
                                                          snde.math_parameter_recording("/graphics/plate/x3d_uv0")],
                                                        [ snde.shared_string("/graphics/plate/x3d_meshed0_projinfo") ],
                                                        "/",
                                                        False,
                                                        False,
                                                        False,
                                                        snde.math_definition("projinfo"),
                                                            None)
recdb.add_math_function(plate_projinfo,False)



plate_boxes3d = snde.boxes_calculation_3d.instantiate( [ snde.math_parameter_recording("/graphics/plate/x3d_meshed0"),
                                                         snde.math_parameter_recording("/graphics/plate/x3d_meshed0_trinormals"),
                                                         snde.math_parameter_recording("/graphics/plate/x3d_meshed0_inplanemat")],
                                                       [ snde.shared_string("/graphics/plate/x3d_meshed0_boxes3d") ],
                                                       "/",
                                                       False,
                                                       False,
                                                       False,
                                                    snde.math_definition("boxes3d"),
                                                    None)
recdb.add_math_function(plate_boxes3d,False)




plate_boxes2d = snde.boxes_calculation_2d.instantiate( [ snde.math_parameter_recording("/graphics/plate/x3d_uv0")],
                                                        [ snde.shared_string("/graphics/plate/x3d_meshed0_boxes2d") ],
                                                        "/",
                                                        False,
                                                        False,
                                                        False,
                                                        snde.math_definition("boxes2d"),
                                                       None)
recdb.add_math_function(plate_boxes2d,False)





transact.end_transaction()
