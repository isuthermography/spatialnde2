# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import ctypes


import types as pytypes


import ctypes


import ctypes



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spatialnde2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spatialnde2')
    _spatialnde2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spatialnde2', [dirname(__file__)])
        except ImportError:
            import _spatialnde2
            return _spatialnde2
        try:
            _mod = imp.load_module('_spatialnde2', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spatialnde2 = swig_import_helper()
    del swig_import_helper
else:
    import _spatialnde2
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _spatialnde2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _spatialnde2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _spatialnde2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _spatialnde2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _spatialnde2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _spatialnde2.SwigPyIterator_copy(self)

    def next(self):
        return _spatialnde2.SwigPyIterator_next(self)

    def __next__(self):
        return _spatialnde2.SwigPyIterator___next__(self)

    def previous(self):
        return _spatialnde2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _spatialnde2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _spatialnde2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _spatialnde2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _spatialnde2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _spatialnde2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _spatialnde2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _spatialnde2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _spatialnde2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _spatialnde2.SHARED_PTR_DISOWN

SNDE_INDEX_INVALID=(long(1)<<64)-1

ct_snde_coord = ctypes.c_double
ct_snde_imagedata=ctypes.c_float
ct_snde_index=ctypes.c_uint64
ct_snde_shortindex=ctypes.c_uint32
ct_snde_ioffset=ctypes.c_int64
ct_snde_bool=ctypes.c_char


class memallocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, memallocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, memallocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def malloc(self, nbytes):
        return _spatialnde2.memallocator_malloc(self, nbytes)

    def calloc(self, nbytes):
        return _spatialnde2.memallocator_calloc(self, nbytes)

    def realloc(self, ptr, newsize):
        return _spatialnde2.memallocator_realloc(self, ptr, newsize)

    def free(self, ptr):
        return _spatialnde2.memallocator_free(self, ptr)
    __swig_destroy__ = _spatialnde2.delete_memallocator
    __del__ = lambda self: None
memallocator_swigregister = _spatialnde2.memallocator_swigregister
memallocator_swigregister(memallocator)

class cmemallocator(memallocator):
    __swig_setmethods__ = {}
    for _s in [memallocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmemallocator, name, value)
    __swig_getmethods__ = {}
    for _s in [memallocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmemallocator, name)
    __repr__ = _swig_repr

    def malloc(self, nbytes):
        return _spatialnde2.cmemallocator_malloc(self, nbytes)

    def calloc(self, nbytes):
        return _spatialnde2.cmemallocator_calloc(self, nbytes)

    def realloc(self, ptr, newsize):
        return _spatialnde2.cmemallocator_realloc(self, ptr, newsize)

    def free(self, ptr):
        return _spatialnde2.cmemallocator_free(self, ptr)
    __swig_destroy__ = _spatialnde2.delete_cmemallocator
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cmemallocator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cmemallocator_swigregister = _spatialnde2.cmemallocator_swigregister
cmemallocator_swigregister(cmemallocator)


def ArrayPtr_fromint(intval):
    return _spatialnde2.ArrayPtr_fromint(intval)
ArrayPtr_fromint = _spatialnde2.ArrayPtr_fromint
class cachemanager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cachemanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cachemanager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cachemanager
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cachemanager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cachemanager_swigregister = _spatialnde2.cachemanager_swigregister
cachemanager_swigregister(cachemanager)

class allocationinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, allocationinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, allocationinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alloc"] = _spatialnde2.allocationinfo_alloc_set
    __swig_getmethods__["alloc"] = _spatialnde2.allocationinfo_alloc_get
    if _newclass:
        alloc = _swig_property(_spatialnde2.allocationinfo_alloc_get, _spatialnde2.allocationinfo_alloc_set)
    __swig_setmethods__["allocindex"] = _spatialnde2.allocationinfo_allocindex_set
    __swig_getmethods__["allocindex"] = _spatialnde2.allocationinfo_allocindex_get
    if _newclass:
        allocindex = _swig_property(_spatialnde2.allocationinfo_allocindex_get, _spatialnde2.allocationinfo_allocindex_set)

    def __init__(self):
        this = _spatialnde2.new_allocationinfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_allocationinfo
    __del__ = lambda self: None
allocationinfo_swigregister = _spatialnde2.allocationinfo_swigregister
allocationinfo_swigregister(allocationinfo)

class arraymanager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arraymanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arraymanager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_memalloc"] = _spatialnde2.arraymanager__memalloc_set
    __swig_getmethods__["_memalloc"] = _spatialnde2.arraymanager__memalloc_get
    if _newclass:
        _memalloc = _swig_property(_spatialnde2.arraymanager__memalloc_get, _spatialnde2.arraymanager__memalloc_set)
    __swig_setmethods__["locker"] = _spatialnde2.arraymanager_locker_set
    __swig_getmethods__["locker"] = _spatialnde2.arraymanager_locker_get
    if _newclass:
        locker = _swig_property(_spatialnde2.arraymanager_locker_get, _spatialnde2.arraymanager_locker_set)

    def __init__(self, memalloc):
        this = _spatialnde2.new_arraymanager(memalloc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_allocated_array(self, arrayptr, elemsize, totalnelem):
        return _spatialnde2.arraymanager_add_allocated_array(self, arrayptr, elemsize, totalnelem)

    def add_follower_array(self, allocatedptr, arrayptr, elemsize):
        return _spatialnde2.arraymanager_add_follower_array(self, allocatedptr, arrayptr, elemsize)

    def alloc(self, allocatedptr, nelem):
        return _spatialnde2.arraymanager_alloc(self, allocatedptr, nelem)

    def free(self, allocatedptr, addr, nelem):
        return _spatialnde2.arraymanager_free(self, allocatedptr, addr, nelem)

    def clear(self):
        return _spatialnde2.arraymanager_clear(self)

    def cleararrays(self, structaddr, structlen):
        return _spatialnde2.arraymanager_cleararrays(self, structaddr, structlen)

    def get_cache(self, name):
        return _spatialnde2.arraymanager_get_cache(self, name)

    def has_cache(self, name):
        return _spatialnde2.arraymanager_has_cache(self, name)

    def set_cache(self, name, cache):
        return _spatialnde2.arraymanager_set_cache(self, name, cache)
    __swig_destroy__ = _spatialnde2.delete_arraymanager
    __del__ = lambda self: None
arraymanager_swigregister = _spatialnde2.arraymanager_swigregister
arraymanager_swigregister(arraymanager)

class arrayinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arrayinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arrayinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arrayptr"] = _spatialnde2.arrayinfo_arrayptr_set
    __swig_getmethods__["arrayptr"] = _spatialnde2.arrayinfo_arrayptr_get
    if _newclass:
        arrayptr = _swig_property(_spatialnde2.arrayinfo_arrayptr_get, _spatialnde2.arrayinfo_arrayptr_set)
    __swig_setmethods__["elemsize"] = _spatialnde2.arrayinfo_elemsize_set
    __swig_getmethods__["elemsize"] = _spatialnde2.arrayinfo_elemsize_get
    if _newclass:
        elemsize = _swig_property(_spatialnde2.arrayinfo_elemsize_get, _spatialnde2.arrayinfo_elemsize_set)
    __swig_setmethods__["destroyed"] = _spatialnde2.arrayinfo_destroyed_set
    __swig_getmethods__["destroyed"] = _spatialnde2.arrayinfo_destroyed_get
    if _newclass:
        destroyed = _swig_property(_spatialnde2.arrayinfo_destroyed_get, _spatialnde2.arrayinfo_destroyed_set)

    def __init__(self):
        this = _spatialnde2.new_arrayinfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_arrayinfo
    __del__ = lambda self: None
arrayinfo_swigregister = _spatialnde2.arrayinfo_swigregister
arrayinfo_swigregister(arrayinfo)

class allocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, allocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, allocator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_firstfree"] = _spatialnde2.allocator__firstfree_set
    __swig_getmethods__["_firstfree"] = _spatialnde2.allocator__firstfree_get
    if _newclass:
        _firstfree = _swig_property(_spatialnde2.allocator__firstfree_get, _spatialnde2.allocator__firstfree_set)
    __swig_setmethods__["_totalnchunks"] = _spatialnde2.allocator__totalnchunks_set
    __swig_getmethods__["_totalnchunks"] = _spatialnde2.allocator__totalnchunks_get
    if _newclass:
        _totalnchunks = _swig_property(_spatialnde2.allocator__totalnchunks_get, _spatialnde2.allocator__totalnchunks_set)
    __swig_setmethods__["_memalloc"] = _spatialnde2.allocator__memalloc_set
    __swig_getmethods__["_memalloc"] = _spatialnde2.allocator__memalloc_get
    if _newclass:
        _memalloc = _swig_property(_spatialnde2.allocator__memalloc_get, _spatialnde2.allocator__memalloc_set)
    __swig_setmethods__["_locker"] = _spatialnde2.allocator__locker_set
    __swig_getmethods__["_locker"] = _spatialnde2.allocator__locker_get
    if _newclass:
        _locker = _swig_property(_spatialnde2.allocator__locker_get, _spatialnde2.allocator__locker_set)
    __swig_setmethods__["realloccallbacks"] = _spatialnde2.allocator_realloccallbacks_set
    __swig_getmethods__["realloccallbacks"] = _spatialnde2.allocator_realloccallbacks_get
    if _newclass:
        realloccallbacks = _swig_property(_spatialnde2.allocator_realloccallbacks_get, _spatialnde2.allocator_realloccallbacks_set)
    __swig_setmethods__["destroyed"] = _spatialnde2.allocator_destroyed_set
    __swig_getmethods__["destroyed"] = _spatialnde2.allocator_destroyed_get
    if _newclass:
        destroyed = _swig_property(_spatialnde2.allocator_destroyed_get, _spatialnde2.allocator_destroyed_set)
    __swig_setmethods__["arrays"] = _spatialnde2.allocator_arrays_set
    __swig_getmethods__["arrays"] = _spatialnde2.allocator_arrays_get
    if _newclass:
        arrays = _swig_property(_spatialnde2.allocator_arrays_get, _spatialnde2.allocator_arrays_set)
    __swig_setmethods__["_allocchunksize"] = _spatialnde2.allocator__allocchunksize_set
    __swig_getmethods__["_allocchunksize"] = _spatialnde2.allocator__allocchunksize_get
    if _newclass:
        _allocchunksize = _swig_property(_spatialnde2.allocator__allocchunksize_get, _spatialnde2.allocator__allocchunksize_set)

    def __init__(self, memalloc, locker, arrayptr, elemsize, totalnelem):
        this = _spatialnde2.new_allocator(memalloc, locker, arrayptr, elemsize, totalnelem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_other_array(self, arrayptr, elsize):
        return _spatialnde2.allocator_add_other_array(self, arrayptr, elsize)

    def num_arrays(self):
        return _spatialnde2.allocator_num_arrays(self)

    def remove_array(self, arrayptr):
        return _spatialnde2.allocator_remove_array(self, arrayptr)

    def _realloc(self, newnchunks):
        return _spatialnde2.allocator__realloc(self, newnchunks)

    def total_nelem(self):
        return _spatialnde2.allocator_total_nelem(self)

    def alloc(self, nelem):
        return _spatialnde2.allocator_alloc(self, nelem)

    def free(self, addr, nelem):
        return _spatialnde2.allocator_free(self, addr, nelem)
    __swig_destroy__ = _spatialnde2.delete_allocator
    __del__ = lambda self: None
allocator_swigregister = _spatialnde2.allocator_swigregister
allocator_swigregister(allocator)

class CountedPyObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountedPyObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CountedPyObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_obj"] = _spatialnde2.CountedPyObject__obj_set
    __swig_getmethods__["_obj"] = _spatialnde2.CountedPyObject__obj_get
    if _newclass:
        _obj = _swig_property(_spatialnde2.CountedPyObject__obj_get, _spatialnde2.CountedPyObject__obj_set)

    def __init__(self, *args):
        this = _spatialnde2.new_CountedPyObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _spatialnde2.CountedPyObject_value(self)
    __swig_destroy__ = _spatialnde2.delete_CountedPyObject
    __del__ = lambda self: None
CountedPyObject_swigregister = _spatialnde2.CountedPyObject_swigregister
CountedPyObject_swigregister(CountedPyObject)

class LockingPositionMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LockingPositionMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LockingPositionMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spatialnde2.LockingPositionMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spatialnde2.LockingPositionMap___nonzero__(self)

    def __bool__(self):
        return _spatialnde2.LockingPositionMap___bool__(self)

    def __len__(self):
        return _spatialnde2.LockingPositionMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _spatialnde2.LockingPositionMap___getitem__(self, key)

    def __delitem__(self, key):
        return _spatialnde2.LockingPositionMap___delitem__(self, key)

    def has_key(self, key):
        return _spatialnde2.LockingPositionMap_has_key(self, key)

    def keys(self):
        return _spatialnde2.LockingPositionMap_keys(self)

    def values(self):
        return _spatialnde2.LockingPositionMap_values(self)

    def items(self):
        return _spatialnde2.LockingPositionMap_items(self)

    def __contains__(self, key):
        return _spatialnde2.LockingPositionMap___contains__(self, key)

    def key_iterator(self):
        return _spatialnde2.LockingPositionMap_key_iterator(self)

    def value_iterator(self):
        return _spatialnde2.LockingPositionMap_value_iterator(self)

    def __setitem__(self, key, x):
        return _spatialnde2.LockingPositionMap___setitem__(self, key, x)

    def __init__(self, *args):
        this = _spatialnde2.new_LockingPositionMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _spatialnde2.LockingPositionMap_empty(self)

    def size(self):
        return _spatialnde2.LockingPositionMap_size(self)

    def swap(self, v):
        return _spatialnde2.LockingPositionMap_swap(self, v)

    def begin(self):
        return _spatialnde2.LockingPositionMap_begin(self)

    def end(self):
        return _spatialnde2.LockingPositionMap_end(self)

    def rbegin(self):
        return _spatialnde2.LockingPositionMap_rbegin(self)

    def rend(self):
        return _spatialnde2.LockingPositionMap_rend(self)

    def clear(self):
        return _spatialnde2.LockingPositionMap_clear(self)

    def get_allocator(self):
        return _spatialnde2.LockingPositionMap_get_allocator(self)

    def count(self, x):
        return _spatialnde2.LockingPositionMap_count(self, x)

    def erase(self, *args):
        return _spatialnde2.LockingPositionMap_erase(self, *args)

    def find(self, x):
        return _spatialnde2.LockingPositionMap_find(self, x)

    def lower_bound(self, x):
        return _spatialnde2.LockingPositionMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _spatialnde2.LockingPositionMap_upper_bound(self, x)

    def equal_range(self, *args):
        return _spatialnde2.LockingPositionMap_equal_range(self, *args)

    def emplace_pair(self, p):
        return _spatialnde2.LockingPositionMap_emplace_pair(self, p)
    __swig_destroy__ = _spatialnde2.delete_LockingPositionMap
    __del__ = lambda self: None
LockingPositionMap_swigregister = _spatialnde2.LockingPositionMap_swigregister
LockingPositionMap_swigregister(LockingPositionMap)

class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trackedregions"] = _spatialnde2.Region_trackedregions_set
    __swig_getmethods__["trackedregions"] = _spatialnde2.Region_trackedregions_get
    if _newclass:
        trackedregions = _swig_property(_spatialnde2.Region_trackedregions_get, _spatialnde2.Region_trackedregions_set)

    def size(self):
        return _spatialnde2.Region_size(self)

    def clear_all(self):
        return _spatialnde2.Region_clear_all(self)

    def mark_region_noargs(self, firstelem, numelems):
        return _spatialnde2.Region_mark_region_noargs(self, firstelem, numelems)

    def __init__(self):
        this = _spatialnde2.new_Region()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_Region
    __del__ = lambda self: None
Region_swigregister = _spatialnde2.Region_swigregister
Region_swigregister(Region)

class VectorOfRegions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfRegions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfRegions, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spatialnde2.VectorOfRegions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spatialnde2.VectorOfRegions___nonzero__(self)

    def __bool__(self):
        return _spatialnde2.VectorOfRegions___bool__(self)

    def __len__(self):
        return _spatialnde2.VectorOfRegions___len__(self)

    def __getslice__(self, i, j):
        return _spatialnde2.VectorOfRegions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spatialnde2.VectorOfRegions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spatialnde2.VectorOfRegions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spatialnde2.VectorOfRegions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spatialnde2.VectorOfRegions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spatialnde2.VectorOfRegions___setitem__(self, *args)

    def pop(self):
        return _spatialnde2.VectorOfRegions_pop(self)

    def append(self, x):
        return _spatialnde2.VectorOfRegions_append(self, x)

    def empty(self):
        return _spatialnde2.VectorOfRegions_empty(self)

    def size(self):
        return _spatialnde2.VectorOfRegions_size(self)

    def swap(self, v):
        return _spatialnde2.VectorOfRegions_swap(self, v)

    def begin(self):
        return _spatialnde2.VectorOfRegions_begin(self)

    def end(self):
        return _spatialnde2.VectorOfRegions_end(self)

    def rbegin(self):
        return _spatialnde2.VectorOfRegions_rbegin(self)

    def rend(self):
        return _spatialnde2.VectorOfRegions_rend(self)

    def clear(self):
        return _spatialnde2.VectorOfRegions_clear(self)

    def get_allocator(self):
        return _spatialnde2.VectorOfRegions_get_allocator(self)

    def pop_back(self):
        return _spatialnde2.VectorOfRegions_pop_back(self)

    def erase(self, *args):
        return _spatialnde2.VectorOfRegions_erase(self, *args)

    def __init__(self, *args):
        this = _spatialnde2.new_VectorOfRegions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spatialnde2.VectorOfRegions_push_back(self, x)

    def front(self):
        return _spatialnde2.VectorOfRegions_front(self)

    def back(self):
        return _spatialnde2.VectorOfRegions_back(self)

    def assign(self, n, x):
        return _spatialnde2.VectorOfRegions_assign(self, n, x)

    def resize(self, *args):
        return _spatialnde2.VectorOfRegions_resize(self, *args)

    def insert(self, *args):
        return _spatialnde2.VectorOfRegions_insert(self, *args)

    def reserve(self, n):
        return _spatialnde2.VectorOfRegions_reserve(self, n)

    def capacity(self):
        return _spatialnde2.VectorOfRegions_capacity(self)
    __swig_destroy__ = _spatialnde2.delete_VectorOfRegions
    __del__ = lambda self: None
VectorOfRegions_swigregister = _spatialnde2.VectorOfRegions_swigregister
VectorOfRegions_swigregister(VectorOfRegions)

class lockingposition_generator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lockingposition_generator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lockingposition_generator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _spatialnde2.new_lockingposition_generator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _spatialnde2.lockingposition_generator_first_set
    __swig_getmethods__["first"] = _spatialnde2.lockingposition_generator_first_get
    if _newclass:
        first = _swig_property(_spatialnde2.lockingposition_generator_first_get, _spatialnde2.lockingposition_generator_first_set)
    __swig_setmethods__["second"] = _spatialnde2.lockingposition_generator_second_set
    __swig_getmethods__["second"] = _spatialnde2.lockingposition_generator_second_get
    if _newclass:
        second = _swig_property(_spatialnde2.lockingposition_generator_second_get, _spatialnde2.lockingposition_generator_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _spatialnde2.delete_lockingposition_generator
    __del__ = lambda self: None
lockingposition_generator_swigregister = _spatialnde2.lockingposition_generator_swigregister
lockingposition_generator_swigregister(lockingposition_generator)

class voidpp_posn_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, voidpp_posn_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, voidpp_posn_map, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _spatialnde2.new_voidpp_posn_map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _spatialnde2.voidpp_posn_map_empty(self)

    def size(self):
        return _spatialnde2.voidpp_posn_map_size(self)

    def swap(self, v):
        return _spatialnde2.voidpp_posn_map_swap(self, v)

    def begin(self):
        return _spatialnde2.voidpp_posn_map_begin(self)

    def end(self):
        return _spatialnde2.voidpp_posn_map_end(self)

    def clear(self):
        return _spatialnde2.voidpp_posn_map_clear(self)

    def get_allocator(self):
        return _spatialnde2.voidpp_posn_map_get_allocator(self)

    def count(self, x):
        return _spatialnde2.voidpp_posn_map_count(self, x)

    def erase(self, *args):
        return _spatialnde2.voidpp_posn_map_erase(self, *args)

    def find(self, x):
        return _spatialnde2.voidpp_posn_map_find(self, x)

    def has_key(self, key):
        return _spatialnde2.voidpp_posn_map_has_key(self, key)
    __swig_destroy__ = _spatialnde2.delete_voidpp_posn_map
    __del__ = lambda self: None
voidpp_posn_map_swigregister = _spatialnde2.voidpp_posn_map_swigregister
voidpp_posn_map_swigregister(voidpp_posn_map)


def voidpp_posn_map_iterator_posn(arg1):
    return _spatialnde2.voidpp_posn_map_iterator_posn(arg1)
voidpp_posn_map_iterator_posn = _spatialnde2.voidpp_posn_map_iterator_posn

def voidpp_posn_map_iterator_ptr(arg1):
    return _spatialnde2.voidpp_posn_map_iterator_ptr(arg1)
voidpp_posn_map_iterator_ptr = _spatialnde2.voidpp_posn_map_iterator_ptr
class arrayvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arrayvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arrayvector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spatialnde2.arrayvector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spatialnde2.arrayvector___nonzero__(self)

    def __bool__(self):
        return _spatialnde2.arrayvector___bool__(self)

    def __len__(self):
        return _spatialnde2.arrayvector___len__(self)

    def __getslice__(self, i, j):
        return _spatialnde2.arrayvector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spatialnde2.arrayvector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spatialnde2.arrayvector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spatialnde2.arrayvector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spatialnde2.arrayvector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spatialnde2.arrayvector___setitem__(self, *args)

    def pop(self):
        return _spatialnde2.arrayvector_pop(self)

    def append(self, x):
        return _spatialnde2.arrayvector_append(self, x)

    def empty(self):
        return _spatialnde2.arrayvector_empty(self)

    def size(self):
        return _spatialnde2.arrayvector_size(self)

    def swap(self, v):
        return _spatialnde2.arrayvector_swap(self, v)

    def begin(self):
        return _spatialnde2.arrayvector_begin(self)

    def end(self):
        return _spatialnde2.arrayvector_end(self)

    def rbegin(self):
        return _spatialnde2.arrayvector_rbegin(self)

    def rend(self):
        return _spatialnde2.arrayvector_rend(self)

    def clear(self):
        return _spatialnde2.arrayvector_clear(self)

    def get_allocator(self):
        return _spatialnde2.arrayvector_get_allocator(self)

    def pop_back(self):
        return _spatialnde2.arrayvector_pop_back(self)

    def erase(self, *args):
        return _spatialnde2.arrayvector_erase(self, *args)

    def __init__(self, *args):
        this = _spatialnde2.new_arrayvector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spatialnde2.arrayvector_push_back(self, x)

    def front(self):
        return _spatialnde2.arrayvector_front(self)

    def back(self):
        return _spatialnde2.arrayvector_back(self)

    def assign(self, n, x):
        return _spatialnde2.arrayvector_assign(self, n, x)

    def resize(self, *args):
        return _spatialnde2.arrayvector_resize(self, *args)

    def insert(self, *args):
        return _spatialnde2.arrayvector_insert(self, *args)

    def reserve(self, n):
        return _spatialnde2.arrayvector_reserve(self, n)

    def capacity(self):
        return _spatialnde2.arrayvector_capacity(self)
    __swig_destroy__ = _spatialnde2.delete_arrayvector
    __del__ = lambda self: None
arrayvector_swigregister = _spatialnde2.arrayvector_swigregister
arrayvector_swigregister(arrayvector)

class rwlock_lockable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwlock_lockable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwlock_lockable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_writer"] = _spatialnde2.rwlock_lockable__writer_set
    __swig_getmethods__["_writer"] = _spatialnde2.rwlock_lockable__writer_get
    if _newclass:
        _writer = _swig_property(_spatialnde2.rwlock_lockable__writer_get, _spatialnde2.rwlock_lockable__writer_set)
    __swig_setmethods__["_rwlock_obj"] = _spatialnde2.rwlock_lockable__rwlock_obj_set
    __swig_getmethods__["_rwlock_obj"] = _spatialnde2.rwlock_lockable__rwlock_obj_get
    if _newclass:
        _rwlock_obj = _swig_property(_spatialnde2.rwlock_lockable__rwlock_obj_get, _spatialnde2.rwlock_lockable__rwlock_obj_set)

    def __init__(self, lock, writer):
        this = _spatialnde2.new_rwlock_lockable(lock, writer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def lock(self):
        return _spatialnde2.rwlock_lockable_lock(self)

    def unlock(self):
        return _spatialnde2.rwlock_lockable_unlock(self)
    __swig_destroy__ = _spatialnde2.delete_rwlock_lockable
    __del__ = lambda self: None
rwlock_lockable_swigregister = _spatialnde2.rwlock_lockable_swigregister
rwlock_lockable_swigregister(rwlock_lockable)

class arrayregion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arrayregion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arrayregion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _spatialnde2.arrayregion_array_set
    __swig_getmethods__["array"] = _spatialnde2.arrayregion_array_get
    if _newclass:
        array = _swig_property(_spatialnde2.arrayregion_array_get, _spatialnde2.arrayregion_array_set)
    __swig_setmethods__["indexstart"] = _spatialnde2.arrayregion_indexstart_set
    __swig_getmethods__["indexstart"] = _spatialnde2.arrayregion_indexstart_get
    if _newclass:
        indexstart = _swig_property(_spatialnde2.arrayregion_indexstart_get, _spatialnde2.arrayregion_indexstart_set)
    __swig_setmethods__["numelems"] = _spatialnde2.arrayregion_numelems_set
    __swig_getmethods__["numelems"] = _spatialnde2.arrayregion_numelems_get
    if _newclass:
        numelems = _swig_property(_spatialnde2.arrayregion_numelems_get, _spatialnde2.arrayregion_numelems_set)

    def __init__(self):
        this = _spatialnde2.new_arrayregion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_arrayregion
    __del__ = lambda self: None
arrayregion_swigregister = _spatialnde2.arrayregion_swigregister
arrayregion_swigregister(arrayregion)

class markedregion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, markedregion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, markedregion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regionstart"] = _spatialnde2.markedregion_regionstart_set
    __swig_getmethods__["regionstart"] = _spatialnde2.markedregion_regionstart_get
    if _newclass:
        regionstart = _swig_property(_spatialnde2.markedregion_regionstart_get, _spatialnde2.markedregion_regionstart_set)
    __swig_setmethods__["regionend"] = _spatialnde2.markedregion_regionend_set
    __swig_getmethods__["regionend"] = _spatialnde2.markedregion_regionend_get
    if _newclass:
        regionend = _swig_property(_spatialnde2.markedregion_regionend_get, _spatialnde2.markedregion_regionend_set)

    def __init__(self, regionstart, regionend):
        this = _spatialnde2.new_markedregion(regionstart, regionend)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def attempt_merge(self, later):
        return _spatialnde2.markedregion_attempt_merge(self, later)

    def breakup(self, breakpoint):
        return _spatialnde2.markedregion_breakup(self, breakpoint)
    __swig_destroy__ = _spatialnde2.delete_markedregion
    __del__ = lambda self: None
markedregion_swigregister = _spatialnde2.markedregion_swigregister
markedregion_swigregister(markedregion)

class rwlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["threadqueue"] = _spatialnde2.rwlock_threadqueue_set
    __swig_getmethods__["threadqueue"] = _spatialnde2.rwlock_threadqueue_get
    if _newclass:
        threadqueue = _swig_property(_spatialnde2.rwlock_threadqueue_get, _spatialnde2.rwlock_threadqueue_set)
    __swig_setmethods__["writelockpending"] = _spatialnde2.rwlock_writelockpending_set
    __swig_getmethods__["writelockpending"] = _spatialnde2.rwlock_writelockpending_get
    if _newclass:
        writelockpending = _swig_property(_spatialnde2.rwlock_writelockpending_get, _spatialnde2.rwlock_writelockpending_set)
    __swig_setmethods__["writelockcount"] = _spatialnde2.rwlock_writelockcount_set
    __swig_getmethods__["writelockcount"] = _spatialnde2.rwlock_writelockcount_get
    if _newclass:
        writelockcount = _swig_property(_spatialnde2.rwlock_writelockcount_get, _spatialnde2.rwlock_writelockcount_set)
    __swig_setmethods__["readlockcount"] = _spatialnde2.rwlock_readlockcount_set
    __swig_getmethods__["readlockcount"] = _spatialnde2.rwlock_readlockcount_get
    if _newclass:
        readlockcount = _swig_property(_spatialnde2.rwlock_readlockcount_get, _spatialnde2.rwlock_readlockcount_set)
    __swig_setmethods__["reader"] = _spatialnde2.rwlock_reader_set
    __swig_getmethods__["reader"] = _spatialnde2.rwlock_reader_get
    if _newclass:
        reader = _swig_property(_spatialnde2.rwlock_reader_get, _spatialnde2.rwlock_reader_set)
    __swig_setmethods__["writer"] = _spatialnde2.rwlock_writer_set
    __swig_getmethods__["writer"] = _spatialnde2.rwlock_writer_get
    if _newclass:
        writer = _swig_property(_spatialnde2.rwlock_writer_get, _spatialnde2.rwlock_writer_set)
    __swig_setmethods__["_dirtyregions"] = _spatialnde2.rwlock__dirtyregions_set
    __swig_getmethods__["_dirtyregions"] = _spatialnde2.rwlock__dirtyregions_get
    if _newclass:
        _dirtyregions = _swig_property(_spatialnde2.rwlock__dirtyregions_get, _spatialnde2.rwlock__dirtyregions_set)
    __swig_setmethods__["_dirtynotify"] = _spatialnde2.rwlock__dirtynotify_set
    __swig_getmethods__["_dirtynotify"] = _spatialnde2.rwlock__dirtynotify_get
    if _newclass:
        _dirtynotify = _swig_property(_spatialnde2.rwlock__dirtynotify_get, _spatialnde2.rwlock__dirtynotify_set)

    def __init__(self):
        this = _spatialnde2.new_rwlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def _wait_for_top_of_queue(self, cond, adminlock):
        return _spatialnde2.rwlock__wait_for_top_of_queue(self, cond, adminlock)

    def lock_reader(self):
        return _spatialnde2.rwlock_lock_reader(self)

    def clone_reader(self):
        return _spatialnde2.rwlock_clone_reader(self)

    def unlock_reader(self):
        return _spatialnde2.rwlock_unlock_reader(self)

    def writer_append_region(self, firstelem, numelems):
        return _spatialnde2.rwlock_writer_append_region(self, firstelem, numelems)

    def lock_writer(self, *args):
        return _spatialnde2.rwlock_lock_writer(self, *args)

    def downgrade(self):
        return _spatialnde2.rwlock_downgrade(self)

    def sidegrade(self):
        return _spatialnde2.rwlock_sidegrade(self)

    def clone_writer(self):
        return _spatialnde2.rwlock_clone_writer(self)

    def unlock_writer(self):
        return _spatialnde2.rwlock_unlock_writer(self)
    __swig_destroy__ = _spatialnde2.delete_rwlock
    __del__ = lambda self: None
rwlock_swigregister = _spatialnde2.rwlock_swigregister
rwlock_swigregister(rwlock)

class rwlock_token(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwlock_token, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwlock_token, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _spatialnde2.new_rwlock_token()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_rwlock_token
    __del__ = lambda self: None
rwlock_token_swigregister = _spatialnde2.rwlock_token_swigregister
rwlock_token_swigregister(rwlock_token)

class rwlock_token_set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwlock_token_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwlock_token_set, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _spatialnde2.new_rwlock_token_set()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_rwlock_token_set
    __del__ = lambda self: None
rwlock_token_set_swigregister = _spatialnde2.rwlock_token_set_swigregister
rwlock_token_set_swigregister(rwlock_token_set)


def release_rwlock_token_set(tokens):
    return _spatialnde2.release_rwlock_token_set(tokens)
release_rwlock_token_set = _spatialnde2.release_rwlock_token_set

def unlock_rwlock_token_set(tokens):
    return _spatialnde2.unlock_rwlock_token_set(tokens)
unlock_rwlock_token_set = _spatialnde2.unlock_rwlock_token_set

def empty_rwlock_token_set():
    return _spatialnde2.empty_rwlock_token_set()
empty_rwlock_token_set = _spatialnde2.empty_rwlock_token_set

def check_rwlock_token_set(tokens):
    return _spatialnde2.check_rwlock_token_set(tokens)
check_rwlock_token_set = _spatialnde2.check_rwlock_token_set

def merge_into_rwlock_token_set(accumulator, tomerge):
    return _spatialnde2.merge_into_rwlock_token_set(accumulator, tomerge)
merge_into_rwlock_token_set = _spatialnde2.merge_into_rwlock_token_set

def clone_rwlock_token_set(orig):
    return _spatialnde2.clone_rwlock_token_set(orig)
clone_rwlock_token_set = _spatialnde2.clone_rwlock_token_set
class arraylock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arraylock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arraylock, name)
    __repr__ = _swig_repr
    __swig_getmethods__["full_array"] = _spatialnde2.arraylock_full_array_get
    if _newclass:
        full_array = _swig_property(_spatialnde2.arraylock_full_array_get)

    def __init__(self):
        this = _spatialnde2.new_arraylock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_arraylock
    __del__ = lambda self: None
arraylock_swigregister = _spatialnde2.arraylock_swigregister
arraylock_swigregister(arraylock)

class lockmanager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lockmanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lockmanager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_arrays"] = _spatialnde2.lockmanager__arrays_set
    __swig_getmethods__["_arrays"] = _spatialnde2.lockmanager__arrays_get
    if _newclass:
        _arrays = _swig_property(_spatialnde2.lockmanager__arrays_get, _spatialnde2.lockmanager__arrays_set)
    __swig_getmethods__["_arrayidx"] = _spatialnde2.lockmanager__arrayidx_get
    if _newclass:
        _arrayidx = _swig_property(_spatialnde2.lockmanager__arrayidx_get)
    __swig_getmethods__["_locks"] = _spatialnde2.lockmanager__locks_get
    if _newclass:
        _locks = _swig_property(_spatialnde2.lockmanager__locks_get)

    def __init__(self):
        this = _spatialnde2.new_lockmanager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_array_idx(self, array):
        return _spatialnde2.lockmanager_get_array_idx(self, array)

    def addarray(self, array):
        return _spatialnde2.lockmanager_addarray(self, array)

    def is_region_granular(self):
        return _spatialnde2.lockmanager_is_region_granular(self)

    def set_array_size(self, Arrayptr, elemsize, nelem):
        return _spatialnde2.lockmanager_set_array_size(self, Arrayptr, elemsize, nelem)

    def _get_preexisting_lock_read_array(self, all_locks, arrayidx):
        return _spatialnde2.lockmanager__get_preexisting_lock_read_array(self, all_locks, arrayidx)

    def _get_lock_read_array(self, all_locks, arrayidx):
        return _spatialnde2.lockmanager__get_lock_read_array(self, all_locks, arrayidx)

    def get_locks_read_array(self, all_locks, array):
        return _spatialnde2.lockmanager_get_locks_read_array(self, all_locks, array)

    def get_preexisting_locks_read_array(self, all_locks, array):
        return _spatialnde2.lockmanager_get_preexisting_locks_read_array(self, all_locks, array)

    def get_locks_read_arrays(self, all_locks, arrays):
        return _spatialnde2.lockmanager_get_locks_read_arrays(self, all_locks, arrays)

    def get_preexisting_locks_read_array_region(self, all_locks, array, indexstart, numelems):
        return _spatialnde2.lockmanager_get_preexisting_locks_read_array_region(self, all_locks, array, indexstart, numelems)

    def get_locks_read_array_region(self, all_locks, array, indexstart, numelems):
        return _spatialnde2.lockmanager_get_locks_read_array_region(self, all_locks, array, indexstart, numelems)

    def get_locks_read_arrays_region(self, all_locks, arrays):
        return _spatialnde2.lockmanager_get_locks_read_arrays_region(self, all_locks, arrays)

    def get_locks_read_all(self, all_locks):
        return _spatialnde2.lockmanager_get_locks_read_all(self, all_locks)

    def _get_preexisting_lock_write_array_region(self, all_locks, arrayidx, indexstart, numelems):
        return _spatialnde2.lockmanager__get_preexisting_lock_write_array_region(self, all_locks, arrayidx, indexstart, numelems)

    def _get_lock_write_array_region(self, all_locks, arrayidx, indexstart, numelems):
        return _spatialnde2.lockmanager__get_lock_write_array_region(self, all_locks, arrayidx, indexstart, numelems)

    def get_locks_write_array(self, all_locks, array):
        return _spatialnde2.lockmanager_get_locks_write_array(self, all_locks, array)

    def get_preexisting_locks_write_array(self, all_locks, array):
        return _spatialnde2.lockmanager_get_preexisting_locks_write_array(self, all_locks, array)

    def get_locks_write_arrays(self, all_locks, arrays):
        return _spatialnde2.lockmanager_get_locks_write_arrays(self, all_locks, arrays)

    def get_preexisting_locks_write_array_region(self, all_locks, array, indexstart, numelems):
        return _spatialnde2.lockmanager_get_preexisting_locks_write_array_region(self, all_locks, array, indexstart, numelems)

    def get_locks_write_array_region(self, all_locks, array, indexstart, numelems):
        return _spatialnde2.lockmanager_get_locks_write_array_region(self, all_locks, array, indexstart, numelems)

    def get_locks_write_arrays_region(self, all_locks, arrays):
        return _spatialnde2.lockmanager_get_locks_write_arrays_region(self, all_locks, arrays)

    def get_locks_write_all(self, all_locks):
        return _spatialnde2.lockmanager_get_locks_write_all(self, all_locks)

    def downgrade_to_read(self, locks):
        return _spatialnde2.lockmanager_downgrade_to_read(self, locks)
    __swig_destroy__ = _spatialnde2.delete_lockmanager
    __del__ = lambda self: None
lockmanager_swigregister = _spatialnde2.lockmanager_swigregister
lockmanager_swigregister(lockmanager)

class lockingposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lockingposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lockingposition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arrayidx"] = _spatialnde2.lockingposition_arrayidx_set
    __swig_getmethods__["arrayidx"] = _spatialnde2.lockingposition_arrayidx_get
    if _newclass:
        arrayidx = _swig_property(_spatialnde2.lockingposition_arrayidx_get, _spatialnde2.lockingposition_arrayidx_set)
    __swig_setmethods__["idx_in_array"] = _spatialnde2.lockingposition_idx_in_array_set
    __swig_getmethods__["idx_in_array"] = _spatialnde2.lockingposition_idx_in_array_get
    if _newclass:
        idx_in_array = _swig_property(_spatialnde2.lockingposition_idx_in_array_get, _spatialnde2.lockingposition_idx_in_array_set)
    __swig_setmethods__["write"] = _spatialnde2.lockingposition_write_set
    __swig_getmethods__["write"] = _spatialnde2.lockingposition_write_get
    if _newclass:
        write = _swig_property(_spatialnde2.lockingposition_write_get, _spatialnde2.lockingposition_write_set)

    def __init__(self, *args):
        this = _spatialnde2.new_lockingposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, other):
        return _spatialnde2.lockingposition___lt__(self, other)
    __swig_destroy__ = _spatialnde2.delete_lockingposition
    __del__ = lambda self: None
lockingposition_swigregister = _spatialnde2.lockingposition_swigregister
lockingposition_swigregister(lockingposition)

class lockingprocess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lockingprocess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lockingprocess, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
lockingprocess_swigregister = _spatialnde2.lockingprocess_swigregister
lockingprocess_swigregister(lockingprocess)

class lockingprocess_pycpp(lockingprocess):
    __swig_setmethods__ = {}
    for _s in [lockingprocess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lockingprocess_pycpp, name, value)
    __swig_getmethods__ = {}
    for _s in [lockingprocess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, lockingprocess_pycpp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
lockingprocess_pycpp_swigregister = _spatialnde2.lockingprocess_pycpp_swigregister
lockingprocess_pycpp_swigregister(lockingprocess_pycpp)



# !!!*** lockingprocess here should be an abstract base class
# defined on the c++ side with
# a specialization that calls Python
class lockingprocess_python(lockingprocess_pycpp):
  manager=None # lockmanager
  waiting_generators=None   # LockingPositionMap
  runnable_generators=None  # list of generators

  arrayreadregions=None  # VectorOfRegions
  arraywriteregions=None # VectorOfRegions
  lastlockingposition=None # lockingposition

  all_tokens=None # rwlock_token_set

  def __init__(self,**kwargs):
    for key in kwargs:
      if not hasattr(self,key):
        raise ValueError("Bad attribute")
      setattr(self,key,kwargs[key])
      pass

  @classmethod
  def execprocess(cls,manager,*lock_generators):
    arrayreadregions=VectorOfRegions(manager._arrays.size())
    arraywriteregions=VectorOfRegions(manager._arrays.size())
    lastlockingposition=lockingposition(0,0,True)

    all_tokens=empty_rwlock_token_set()

# locking generators take (all_tokens,arrayreadregions,arraywriteregions)
# as parameters. They yield either more generators
# or a lockingposition. If they yield a locking position, the next()
# call on them will cause them to perform the lock and yield None,
# then they may yield another generator or locking position, etc. 

    waiting_generators = LockingPositionMap()

    proc=cls(manager=manager,
             waiting_generators=waiting_generators,
#runnable_generators=runnable_generators,
             arrayreadregions=arrayreadregions,
	     arraywriteregions=arraywriteregions,
             lastlockingposition=lastlockingposition,
             all_tokens=all_tokens)
    proc.runnable_generators=[ lock_generator(proc) for lock_generator in lock_generators ]


    while len(waiting_generators) > 0 or len(proc.runnable_generators) > 0:
      while len(proc.runnable_generators) > 0:
        thisgen=proc.runnable_generators[0]
        newgen=next(proc.runnable_generators[0])
        proc.runnable_generators.pop(0) # this generator is no longer runnable

        proc.process_generated(thisgen,newgen)

        pass
# ok... no more runnable generators... do we have a waiting generator?
      if len(waiting_generators) > 0:
# grab the first waiting generator
# Use C++ style iteration because that way we iterate
# over pairs, not over keys
	iterator=waiting_generators.begin()
	(lockpos,lockcall_gen)=iterator.value()
	(lockcall,gen)=lockcall_gen.value()


        waiting_generators.erase(iterator)

# perform locking operation
        res=lockcall()
	newgen=None
	try:
	  newgen=gen.send(res)
	except StopIteration:
	  pass
        if newgen is not None:
          proc.process_generated(gen,newgen)
	  pass
        pass
      pass
    return (proc.all_tokens,proc.arrayreadregions,proc.arraywriteregions)

  def process_generated(self,thisgen,newgen):
    if isinstance(newgen,pytypes.GeneratorType):
# Got another generator
      self.runnable_generators.append(thisgen)
      self.runnable_generators.append(newgen)
      pass
    else:
      assert(isinstance(newgen,tuple) and isinstance(newgen[0],lockingposition))
      (posn,lockcall) = newgen	

      self.waiting_generators.emplace_pair(lockingposition_generator(posn,CountedPyObject((lockcall,thisgen))))
      pass
    pass

  def get_locks_read_array_region(self,ArrayPtr_Swig,indexstart,numelems):
#ArrayPtr_Swig = ArrayPtr_fromint(arrayptr)
    if not self.manager._arrayidx.has_key(ArrayPtr_Swig):
      raise ValueError("Array not found")

    iterator = self.manager._arrayidx.find(ArrayPtr_Swig)
    arrayidx = voidpp_posn_map_iterator_posn(iterator) # fromiterator(iterator).get_posn()
#if iterator==self.manager._arrayidx.end():  # ***!!!! This diagnosis does not actually work
#  raise ValueError("Array not found")

    if self.manager.is_region_granular():
      posn=lockingposition(arrayidx,indexstart,False)
      pass
    else:
      posn=lockingposition(arrayidx,0,False)
      pass

    def lockcall():
      newset = self.manager.get_locks_read_array_region(self.all_tokens,ArrayPtr_Swig,indexstart,numelems)
      self.arrayreadregions[arrayidx].mark_region_noargs(indexstart,numelems)
      return newset
    return (posn,lockcall)
  pass

def pylockprocess(*args,**kwargs):
  return lockingprocess_python.execprocess(*args,**kwargs)
  pass

class pylockholder(object):
  def store(self,lockname,value):
    setattr(self,lockname,value)
    pass
  pass




  # IMPORTANT: definition in geometrydata.h must be changed in parallel with this.

class snde_geometrydata(ctypes.Structure):
  _fields_=[("tol",ctypes.c_double),
	   ("meshparts",ctypes.c_void_p), # POINTER(snde_meshedpart)),
# ... !!!*** Need to fill this in!!!***
	   ("vertices",ctypes.c_void_p)]

  def field_address(self,fieldname):
# unfortunately byref() doesnt work right because struct members when accesed become plain ints
    offset=getattr(self.__class__,fieldname).offset
    return ArrayPtr_fromint(ctypes.addressof(self)+offset)
  pass



class geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["geom"] = _spatialnde2.geometry_geom_set
    __swig_getmethods__["geom"] = _spatialnde2.geometry_geom_get
    if _newclass:
        geom = _swig_property(_spatialnde2.geometry_geom_get, _spatialnde2.geometry_geom_set)
    __swig_setmethods__["manager"] = _spatialnde2.geometry_manager_set
    __swig_getmethods__["manager"] = _spatialnde2.geometry_manager_get
    if _newclass:
        manager = _swig_property(_spatialnde2.geometry_manager_get, _spatialnde2.geometry_manager_set)

    def __init__(self, tol, manager):
        this = _spatialnde2.new_geometry(tol, manager)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_geometry
    __del__ = lambda self: None
geometry_swigregister = _spatialnde2.geometry_swigregister
geometry_swigregister(geometry)

class mesheduv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mesheduv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mesheduv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["geom"] = _spatialnde2.mesheduv_geom_set
    __swig_getmethods__["geom"] = _spatialnde2.mesheduv_geom_get
    if _newclass:
        geom = _swig_property(_spatialnde2.mesheduv_geom_get, _spatialnde2.mesheduv_geom_set)
    __swig_setmethods__["name"] = _spatialnde2.mesheduv_name_set
    __swig_getmethods__["name"] = _spatialnde2.mesheduv_name_get
    if _newclass:
        name = _swig_property(_spatialnde2.mesheduv_name_get, _spatialnde2.mesheduv_name_set)
    __swig_setmethods__["mesheduvnum"] = _spatialnde2.mesheduv_mesheduvnum_set
    __swig_getmethods__["mesheduvnum"] = _spatialnde2.mesheduv_mesheduvnum_get
    if _newclass:
        mesheduvnum = _swig_property(_spatialnde2.mesheduv_mesheduvnum_get, _spatialnde2.mesheduv_mesheduvnum_set)

    def __init__(self, geom, name, mesheduvnum):
        this = _spatialnde2.new_mesheduv(geom, name, mesheduvnum)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_mesheduv
    __del__ = lambda self: None
mesheduv_swigregister = _spatialnde2.mesheduv_swigregister
mesheduv_swigregister(mesheduv)

SNDE_COMPONENT_GEOMWRITE_MESHEDPARTS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_MESHEDPARTS
SNDE_COMPONENT_GEOMWRITE_VERTICES = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_VERTICES
SNDE_COMPONENT_GEOMWRITE_PRINCIPAL_CURVATURES = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_PRINCIPAL_CURVATURES
SNDE_COMPONENT_GEOMWRITE_CURVATURE_TANGENT_AXES = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_CURVATURE_TANGENT_AXES
SNDE_COMPONENT_GEOMWRITE_TRIS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_TRIS
SNDE_COMPONENT_GEOMWRITE_REFPOINTS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_REFPOINTS
SNDE_COMPONENT_GEOMWRITE_MAXRADIUS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_MAXRADIUS
SNDE_COMPONENT_GEOMWRITE_NORMAL = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_NORMAL
SNDE_COMPONENT_GEOMWRITE_INPLANEMAT = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_INPLANEMAT
SNDE_COMPONENT_GEOMWRITE_BOXES = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_BOXES
SNDE_COMPONENT_GEOMWRITE_BOXCOORDS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_BOXCOORDS
SNDE_COMPONENT_GEOMWRITE_BOXPOLYS = _spatialnde2.SNDE_COMPONENT_GEOMWRITE_BOXPOLYS
class component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, component, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    subassembly = _spatialnde2.component_subassembly
    nurbs = _spatialnde2.component_nurbs
    meshed = _spatialnde2.component_meshed
    __swig_setmethods__["type"] = _spatialnde2.component_type_set
    __swig_getmethods__["type"] = _spatialnde2.component_type_get
    if _newclass:
        type = _swig_property(_spatialnde2.component_type_get, _spatialnde2.component_type_set)

    def orientation(self):
        return _spatialnde2.component_orientation(self)

    def obtain_lock(self, process, writemask=0):
        return _spatialnde2.component_obtain_lock(self, process, writemask)
    __swig_destroy__ = _spatialnde2.delete_component
    __del__ = lambda self: None
component_swigregister = _spatialnde2.component_swigregister
component_swigregister(component)

class assembly(component):
    __swig_setmethods__ = {}
    for _s in [component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, assembly, name, value)
    __swig_getmethods__ = {}
    for _s in [component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, assembly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pieces"] = _spatialnde2.assembly_pieces_set
    __swig_getmethods__["pieces"] = _spatialnde2.assembly_pieces_get
    if _newclass:
        pieces = _swig_property(_spatialnde2.assembly_pieces_get, _spatialnde2.assembly_pieces_set)
    __swig_setmethods__["_orientation"] = _spatialnde2.assembly__orientation_set
    __swig_getmethods__["_orientation"] = _spatialnde2.assembly__orientation_get
    if _newclass:
        _orientation = _swig_property(_spatialnde2.assembly__orientation_get, _spatialnde2.assembly__orientation_set)

    def __init__(self, orientation):
        this = _spatialnde2.new_assembly(orientation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def orientation(self):
        return _spatialnde2.assembly_orientation(self)

    def obtain_lock(self, process, writemask=0):
        return _spatialnde2.assembly_obtain_lock(self, process, writemask)
    __swig_destroy__ = _spatialnde2.delete_assembly
    __del__ = lambda self: None
assembly_swigregister = _spatialnde2.assembly_swigregister
assembly_swigregister(assembly)

class nurbspart(component):
    __swig_setmethods__ = {}
    for _s in [component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nurbspart, name, value)
    __swig_getmethods__ = {}
    for _s in [component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, nurbspart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nurbspartnum"] = _spatialnde2.nurbspart_nurbspartnum_set
    __swig_getmethods__["nurbspartnum"] = _spatialnde2.nurbspart_nurbspartnum_get
    if _newclass:
        nurbspartnum = _swig_property(_spatialnde2.nurbspart_nurbspartnum_get, _spatialnde2.nurbspart_nurbspartnum_set)
    __swig_setmethods__["geom"] = _spatialnde2.nurbspart_geom_set
    __swig_getmethods__["geom"] = _spatialnde2.nurbspart_geom_get
    if _newclass:
        geom = _swig_property(_spatialnde2.nurbspart_geom_get, _spatialnde2.nurbspart_geom_set)

    def __init__(self, geom, nurbspartnum):
        this = _spatialnde2.new_nurbspart(geom, nurbspartnum)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def orientation(self):
        return _spatialnde2.nurbspart_orientation(self)

    def obtain_lock(self, process, writemask=0):
        return _spatialnde2.nurbspart_obtain_lock(self, process, writemask)
    __swig_destroy__ = _spatialnde2.delete_nurbspart
    __del__ = lambda self: None
nurbspart_swigregister = _spatialnde2.nurbspart_swigregister
nurbspart_swigregister(nurbspart)

class meshedpart(component):
    __swig_setmethods__ = {}
    for _s in [component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, meshedpart, name, value)
    __swig_getmethods__ = {}
    for _s in [component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, meshedpart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["geom"] = _spatialnde2.meshedpart_geom_set
    __swig_getmethods__["geom"] = _spatialnde2.meshedpart_geom_get
    if _newclass:
        geom = _swig_property(_spatialnde2.meshedpart_geom_get, _spatialnde2.meshedpart_geom_set)
    __swig_setmethods__["meshedpartnum"] = _spatialnde2.meshedpart_meshedpartnum_set
    __swig_getmethods__["meshedpartnum"] = _spatialnde2.meshedpart_meshedpartnum_get
    if _newclass:
        meshedpartnum = _swig_property(_spatialnde2.meshedpart_meshedpartnum_get, _spatialnde2.meshedpart_meshedpartnum_set)
    __swig_setmethods__["parameterizations"] = _spatialnde2.meshedpart_parameterizations_set
    __swig_getmethods__["parameterizations"] = _spatialnde2.meshedpart_parameterizations_get
    if _newclass:
        parameterizations = _swig_property(_spatialnde2.meshedpart_parameterizations_get, _spatialnde2.meshedpart_parameterizations_set)

    def __init__(self, geom, meshedpartnum):
        this = _spatialnde2.new_meshedpart(geom, meshedpartnum)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addparameterization(self, parameterization):
        return _spatialnde2.meshedpart_addparameterization(self, parameterization)

    def orientation(self):
        return _spatialnde2.meshedpart_orientation(self)

    def obtain_lock(self, process, writemask=0):
        return _spatialnde2.meshedpart_obtain_lock(self, process, writemask)
    __swig_destroy__ = _spatialnde2.delete_meshedpart
    __del__ = lambda self: None
meshedpart_swigregister = _spatialnde2.meshedpart_swigregister
meshedpart_swigregister(meshedpart)


def snde_opencl_callback(event, event_command_exec_status, user_data):
    return _spatialnde2.snde_opencl_callback(event, event_command_exec_status, user_data)
snde_opencl_callback = _spatialnde2.snde_opencl_callback
class openclregion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, openclregion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, openclregion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regionstart"] = _spatialnde2.openclregion_regionstart_set
    __swig_getmethods__["regionstart"] = _spatialnde2.openclregion_regionstart_get
    if _newclass:
        regionstart = _swig_property(_spatialnde2.openclregion_regionstart_get, _spatialnde2.openclregion_regionstart_set)
    __swig_setmethods__["regionend"] = _spatialnde2.openclregion_regionend_set
    __swig_getmethods__["regionend"] = _spatialnde2.openclregion_regionend_get
    if _newclass:
        regionend = _swig_property(_spatialnde2.openclregion_regionend_get, _spatialnde2.openclregion_regionend_set)
    __swig_setmethods__["fill_event"] = _spatialnde2.openclregion_fill_event_set
    __swig_getmethods__["fill_event"] = _spatialnde2.openclregion_fill_event_get
    if _newclass:
        fill_event = _swig_property(_spatialnde2.openclregion_fill_event_get, _spatialnde2.openclregion_fill_event_set)

    def __init__(self, regionstart, regionend):
        this = _spatialnde2.new_openclregion(regionstart, regionend)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_openclregion
    __del__ = lambda self: None

    def attempt_merge(self, later):
        return _spatialnde2.openclregion_attempt_merge(self, later)

    def breakup(self, breakpoint):
        return _spatialnde2.openclregion_breakup(self, breakpoint)
openclregion_swigregister = _spatialnde2.openclregion_swigregister
openclregion_swigregister(openclregion)

class openclarrayinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, openclarrayinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, openclarrayinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["context"] = _spatialnde2.openclarrayinfo_context_set
    __swig_getmethods__["context"] = _spatialnde2.openclarrayinfo_context_get
    if _newclass:
        context = _swig_property(_spatialnde2.openclarrayinfo_context_get, _spatialnde2.openclarrayinfo_context_set)
    __swig_setmethods__["arrayptr"] = _spatialnde2.openclarrayinfo_arrayptr_set
    __swig_getmethods__["arrayptr"] = _spatialnde2.openclarrayinfo_arrayptr_get
    if _newclass:
        arrayptr = _swig_property(_spatialnde2.openclarrayinfo_arrayptr_get, _spatialnde2.openclarrayinfo_arrayptr_set)

    def __init__(self, *args):
        this = _spatialnde2.new_openclarrayinfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, b):
        return _spatialnde2.openclarrayinfo___eq__(self, b)
    __swig_destroy__ = _spatialnde2.delete_openclarrayinfo
    __del__ = lambda self: None
openclarrayinfo_swigregister = _spatialnde2.openclarrayinfo_swigregister
openclarrayinfo_swigregister(openclarrayinfo)

class _openclbuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _openclbuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _openclbuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _spatialnde2._openclbuffer_buffer_set
    __swig_getmethods__["buffer"] = _spatialnde2._openclbuffer_buffer_get
    if _newclass:
        buffer = _swig_property(_spatialnde2._openclbuffer_buffer_get, _spatialnde2._openclbuffer_buffer_set)
    __swig_setmethods__["elemsize"] = _spatialnde2._openclbuffer_elemsize_set
    __swig_getmethods__["elemsize"] = _spatialnde2._openclbuffer_elemsize_get
    if _newclass:
        elemsize = _swig_property(_spatialnde2._openclbuffer_elemsize_get, _spatialnde2._openclbuffer_elemsize_set)
    __swig_setmethods__["invalidity"] = _spatialnde2._openclbuffer_invalidity_set
    __swig_getmethods__["invalidity"] = _spatialnde2._openclbuffer_invalidity_get
    if _newclass:
        invalidity = _swig_property(_spatialnde2._openclbuffer_invalidity_get, _spatialnde2._openclbuffer_invalidity_set)
    __swig_setmethods__["arrayptr"] = _spatialnde2._openclbuffer_arrayptr_set
    __swig_getmethods__["arrayptr"] = _spatialnde2._openclbuffer_arrayptr_get
    if _newclass:
        arrayptr = _swig_property(_spatialnde2._openclbuffer_arrayptr_get, _spatialnde2._openclbuffer_arrayptr_set)
    __swig_setmethods__["realloc_callback"] = _spatialnde2._openclbuffer_realloc_callback_set
    __swig_getmethods__["realloc_callback"] = _spatialnde2._openclbuffer_realloc_callback_get
    if _newclass:
        realloc_callback = _swig_property(_spatialnde2._openclbuffer_realloc_callback_get, _spatialnde2._openclbuffer_realloc_callback_set)
    __swig_setmethods__["alloc"] = _spatialnde2._openclbuffer_alloc_set
    __swig_getmethods__["alloc"] = _spatialnde2._openclbuffer_alloc_get
    if _newclass:
        alloc = _swig_property(_spatialnde2._openclbuffer_alloc_get, _spatialnde2._openclbuffer_alloc_set)

    def __init__(self, context, alloc, elemsize, arrayptr, arraymanageradminmutex):
        this = _spatialnde2.new__openclbuffer(context, alloc, elemsize, arrayptr, arraymanageradminmutex)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete__openclbuffer
    __del__ = lambda self: None
_openclbuffer_swigregister = _spatialnde2._openclbuffer_swigregister
_openclbuffer_swigregister(_openclbuffer)

class openclcachemanager(cachemanager):
    __swig_setmethods__ = {}
    for _s in [cachemanager]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, openclcachemanager, name, value)
    __swig_getmethods__ = {}
    for _s in [cachemanager]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, openclcachemanager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manager"] = _spatialnde2.openclcachemanager_manager_set
    __swig_getmethods__["manager"] = _spatialnde2.openclcachemanager_manager_get
    if _newclass:
        manager = _swig_property(_spatialnde2.openclcachemanager_manager_get, _spatialnde2.openclcachemanager_manager_set)

    def __init__(self, manager):
        this = _spatialnde2.new_openclcachemanager(manager)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOpenCLBuffer(self, alllocks, context, queue, allocatedptr, arrayptr, arrayreadregions, arraywriteregions, write_only=False):
        return _spatialnde2.openclcachemanager_GetOpenCLBuffer(self, alllocks, context, queue, allocatedptr, arrayptr, arrayreadregions, arraywriteregions, write_only)

    def ReleaseOpenCLBuffer(self, readlocks, writelocks, context, queue, mem, allocatedptr, arrayptr, arraywriteregions, input_data_not_needed, output_data_complete):
        return _spatialnde2.openclcachemanager_ReleaseOpenCLBuffer(self, readlocks, writelocks, context, queue, mem, allocatedptr, arrayptr, arraywriteregions, input_data_not_needed, output_data_complete)
    __swig_destroy__ = _spatialnde2.delete_openclcachemanager
    __del__ = lambda self: None
openclcachemanager_swigregister = _spatialnde2.openclcachemanager_swigregister
openclcachemanager_swigregister(openclcachemanager)


def get_opencl_cache_manager(manager):
    return _spatialnde2.get_opencl_cache_manager(manager)
get_opencl_cache_manager = _spatialnde2.get_opencl_cache_manager
class OpenCLBuffer_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCLBuffer_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCLBuffer_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manager"] = _spatialnde2.OpenCLBuffer_info_manager_set
    __swig_getmethods__["manager"] = _spatialnde2.OpenCLBuffer_info_manager_get
    if _newclass:
        manager = _swig_property(_spatialnde2.OpenCLBuffer_info_manager_get, _spatialnde2.OpenCLBuffer_info_manager_set)
    __swig_setmethods__["cachemanager"] = _spatialnde2.OpenCLBuffer_info_cachemanager_set
    __swig_getmethods__["cachemanager"] = _spatialnde2.OpenCLBuffer_info_cachemanager_get
    if _newclass:
        cachemanager = _swig_property(_spatialnde2.OpenCLBuffer_info_cachemanager_get, _spatialnde2.OpenCLBuffer_info_cachemanager_set)
    __swig_setmethods__["queue"] = _spatialnde2.OpenCLBuffer_info_queue_set
    __swig_getmethods__["queue"] = _spatialnde2.OpenCLBuffer_info_queue_get
    if _newclass:
        queue = _swig_property(_spatialnde2.OpenCLBuffer_info_queue_get, _spatialnde2.OpenCLBuffer_info_queue_set)
    __swig_setmethods__["mem"] = _spatialnde2.OpenCLBuffer_info_mem_set
    __swig_getmethods__["mem"] = _spatialnde2.OpenCLBuffer_info_mem_get
    if _newclass:
        mem = _swig_property(_spatialnde2.OpenCLBuffer_info_mem_get, _spatialnde2.OpenCLBuffer_info_mem_set)
    __swig_setmethods__["allocatedptr"] = _spatialnde2.OpenCLBuffer_info_allocatedptr_set
    __swig_getmethods__["allocatedptr"] = _spatialnde2.OpenCLBuffer_info_allocatedptr_get
    if _newclass:
        allocatedptr = _swig_property(_spatialnde2.OpenCLBuffer_info_allocatedptr_get, _spatialnde2.OpenCLBuffer_info_allocatedptr_set)
    __swig_setmethods__["arrayptr"] = _spatialnde2.OpenCLBuffer_info_arrayptr_set
    __swig_getmethods__["arrayptr"] = _spatialnde2.OpenCLBuffer_info_arrayptr_get
    if _newclass:
        arrayptr = _swig_property(_spatialnde2.OpenCLBuffer_info_arrayptr_get, _spatialnde2.OpenCLBuffer_info_arrayptr_set)
    __swig_setmethods__["readlocks"] = _spatialnde2.OpenCLBuffer_info_readlocks_set
    __swig_getmethods__["readlocks"] = _spatialnde2.OpenCLBuffer_info_readlocks_get
    if _newclass:
        readlocks = _swig_property(_spatialnde2.OpenCLBuffer_info_readlocks_get, _spatialnde2.OpenCLBuffer_info_readlocks_set)
    __swig_setmethods__["writelocks"] = _spatialnde2.OpenCLBuffer_info_writelocks_set
    __swig_getmethods__["writelocks"] = _spatialnde2.OpenCLBuffer_info_writelocks_get
    if _newclass:
        writelocks = _swig_property(_spatialnde2.OpenCLBuffer_info_writelocks_get, _spatialnde2.OpenCLBuffer_info_writelocks_set)
    __swig_setmethods__["arraywriteregions"] = _spatialnde2.OpenCLBuffer_info_arraywriteregions_set
    __swig_getmethods__["arraywriteregions"] = _spatialnde2.OpenCLBuffer_info_arraywriteregions_get
    if _newclass:
        arraywriteregions = _swig_property(_spatialnde2.OpenCLBuffer_info_arraywriteregions_get, _spatialnde2.OpenCLBuffer_info_arraywriteregions_set)

    def __init__(self, *args):
        this = _spatialnde2.new_OpenCLBuffer_info(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_OpenCLBuffer_info
    __del__ = lambda self: None
OpenCLBuffer_info_swigregister = _spatialnde2.OpenCLBuffer_info_swigregister
OpenCLBuffer_info_swigregister(OpenCLBuffer_info)

class OpenCLBuffers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCLBuffers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCLBuffers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["context"] = _spatialnde2.OpenCLBuffers_context_set
    __swig_getmethods__["context"] = _spatialnde2.OpenCLBuffers_context_get
    if _newclass:
        context = _swig_property(_spatialnde2.OpenCLBuffers_context_get, _spatialnde2.OpenCLBuffers_context_set)
    __swig_setmethods__["locks"] = _spatialnde2.OpenCLBuffers_locks_set
    __swig_getmethods__["locks"] = _spatialnde2.OpenCLBuffers_locks_get
    if _newclass:
        locks = _swig_property(_spatialnde2.OpenCLBuffers_locks_get, _spatialnde2.OpenCLBuffers_locks_set)
    __swig_setmethods__["arrayreadregions"] = _spatialnde2.OpenCLBuffers_arrayreadregions_set
    __swig_getmethods__["arrayreadregions"] = _spatialnde2.OpenCLBuffers_arrayreadregions_get
    if _newclass:
        arrayreadregions = _swig_property(_spatialnde2.OpenCLBuffers_arrayreadregions_get, _spatialnde2.OpenCLBuffers_arrayreadregions_set)
    __swig_setmethods__["arraywriteregions"] = _spatialnde2.OpenCLBuffers_arraywriteregions_set
    __swig_getmethods__["arraywriteregions"] = _spatialnde2.OpenCLBuffers_arraywriteregions_get
    if _newclass:
        arraywriteregions = _swig_property(_spatialnde2.OpenCLBuffers_arraywriteregions_get, _spatialnde2.OpenCLBuffers_arraywriteregions_set)
    __swig_setmethods__["fill_events"] = _spatialnde2.OpenCLBuffers_fill_events_set
    __swig_getmethods__["fill_events"] = _spatialnde2.OpenCLBuffers_fill_events_get
    if _newclass:
        fill_events = _swig_property(_spatialnde2.OpenCLBuffers_fill_events_get, _spatialnde2.OpenCLBuffers_fill_events_set)

    def __init__(self, context, locks, arrayreadregions, arraywriteregions):
        this = _spatialnde2.new_OpenCLBuffers(context, locks, arrayreadregions, arraywriteregions)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spatialnde2.delete_OpenCLBuffers
    __del__ = lambda self: None

    def Mem_untracked(self, arrayptr):
        return _spatialnde2.OpenCLBuffers_Mem_untracked(self, arrayptr)

    def FillEvents_untracked(self):
        return _spatialnde2.OpenCLBuffers_FillEvents_untracked(self)

    def NumFillEvents(self):
        return _spatialnde2.OpenCLBuffers_NumFillEvents(self)

    def SetBufferAsKernelArg(self, kernel, arg_index, arrayptr):
        return _spatialnde2.OpenCLBuffers_SetBufferAsKernelArg(self, kernel, arg_index, arrayptr)

    def AddBuffer(self, manager, queue, allocatedptr, arrayptr, write_only=False):
        return _spatialnde2.OpenCLBuffers_AddBuffer(self, manager, queue, allocatedptr, arrayptr, write_only)

    def AddBufferAsKernelArg(self, manager, queue, kernel, arg_index, allocatedptr, arrayptr):
        return _spatialnde2.OpenCLBuffers_AddBufferAsKernelArg(self, manager, queue, kernel, arg_index, allocatedptr, arrayptr)

    def RemBuffer(self, arrayptr, input_data_not_needed, output_data_complete, wait):
        return _spatialnde2.OpenCLBuffers_RemBuffer(self, arrayptr, input_data_not_needed, output_data_complete, wait)

    def RemBuffers(self, *args):
        return _spatialnde2.OpenCLBuffers_RemBuffers(self, *args)
OpenCLBuffers_swigregister = _spatialnde2.OpenCLBuffers_swigregister
OpenCLBuffers_swigregister(OpenCLBuffers)

CL_SUCCESS = _spatialnde2.CL_SUCCESS
CL_DEVICE_NOT_FOUND = _spatialnde2.CL_DEVICE_NOT_FOUND
CL_DEVICE_NOT_AVAILABLE = _spatialnde2.CL_DEVICE_NOT_AVAILABLE
CL_COMPILER_NOT_AVAILABLE = _spatialnde2.CL_COMPILER_NOT_AVAILABLE
CL_MEM_OBJECT_ALLOCATION_FAILURE = _spatialnde2.CL_MEM_OBJECT_ALLOCATION_FAILURE
CL_OUT_OF_RESOURCES = _spatialnde2.CL_OUT_OF_RESOURCES
CL_OUT_OF_HOST_MEMORY = _spatialnde2.CL_OUT_OF_HOST_MEMORY
CL_PROFILING_INFO_NOT_AVAILABLE = _spatialnde2.CL_PROFILING_INFO_NOT_AVAILABLE
CL_MEM_COPY_OVERLAP = _spatialnde2.CL_MEM_COPY_OVERLAP
CL_IMAGE_FORMAT_MISMATCH = _spatialnde2.CL_IMAGE_FORMAT_MISMATCH
CL_IMAGE_FORMAT_NOT_SUPPORTED = _spatialnde2.CL_IMAGE_FORMAT_NOT_SUPPORTED
CL_BUILD_PROGRAM_FAILURE = _spatialnde2.CL_BUILD_PROGRAM_FAILURE
CL_MAP_FAILURE = _spatialnde2.CL_MAP_FAILURE
CL_MISALIGNED_SUB_BUFFER_OFFSET = _spatialnde2.CL_MISALIGNED_SUB_BUFFER_OFFSET
CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = _spatialnde2.CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST
CL_COMPILE_PROGRAM_FAILURE = _spatialnde2.CL_COMPILE_PROGRAM_FAILURE
CL_LINKER_NOT_AVAILABLE = _spatialnde2.CL_LINKER_NOT_AVAILABLE
CL_LINK_PROGRAM_FAILURE = _spatialnde2.CL_LINK_PROGRAM_FAILURE
CL_DEVICE_PARTITION_FAILED = _spatialnde2.CL_DEVICE_PARTITION_FAILED
CL_KERNEL_ARG_INFO_NOT_AVAILABLE = _spatialnde2.CL_KERNEL_ARG_INFO_NOT_AVAILABLE
CL_INVALID_VALUE = _spatialnde2.CL_INVALID_VALUE
CL_INVALID_DEVICE_TYPE = _spatialnde2.CL_INVALID_DEVICE_TYPE
CL_INVALID_PLATFORM = _spatialnde2.CL_INVALID_PLATFORM
CL_INVALID_DEVICE = _spatialnde2.CL_INVALID_DEVICE
CL_INVALID_CONTEXT = _spatialnde2.CL_INVALID_CONTEXT
CL_INVALID_QUEUE_PROPERTIES = _spatialnde2.CL_INVALID_QUEUE_PROPERTIES
CL_INVALID_COMMAND_QUEUE = _spatialnde2.CL_INVALID_COMMAND_QUEUE
CL_INVALID_HOST_PTR = _spatialnde2.CL_INVALID_HOST_PTR
CL_INVALID_MEM_OBJECT = _spatialnde2.CL_INVALID_MEM_OBJECT
CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = _spatialnde2.CL_INVALID_IMAGE_FORMAT_DESCRIPTOR
CL_INVALID_IMAGE_SIZE = _spatialnde2.CL_INVALID_IMAGE_SIZE
CL_INVALID_SAMPLER = _spatialnde2.CL_INVALID_SAMPLER
CL_INVALID_BINARY = _spatialnde2.CL_INVALID_BINARY
CL_INVALID_BUILD_OPTIONS = _spatialnde2.CL_INVALID_BUILD_OPTIONS
CL_INVALID_PROGRAM = _spatialnde2.CL_INVALID_PROGRAM
CL_INVALID_PROGRAM_EXECUTABLE = _spatialnde2.CL_INVALID_PROGRAM_EXECUTABLE
CL_INVALID_KERNEL_NAME = _spatialnde2.CL_INVALID_KERNEL_NAME
CL_INVALID_KERNEL_DEFINITION = _spatialnde2.CL_INVALID_KERNEL_DEFINITION
CL_INVALID_KERNEL = _spatialnde2.CL_INVALID_KERNEL
CL_INVALID_ARG_INDEX = _spatialnde2.CL_INVALID_ARG_INDEX
CL_INVALID_ARG_VALUE = _spatialnde2.CL_INVALID_ARG_VALUE
CL_INVALID_ARG_SIZE = _spatialnde2.CL_INVALID_ARG_SIZE
CL_INVALID_KERNEL_ARGS = _spatialnde2.CL_INVALID_KERNEL_ARGS
CL_INVALID_WORK_DIMENSION = _spatialnde2.CL_INVALID_WORK_DIMENSION
CL_INVALID_WORK_GROUP_SIZE = _spatialnde2.CL_INVALID_WORK_GROUP_SIZE
CL_INVALID_WORK_ITEM_SIZE = _spatialnde2.CL_INVALID_WORK_ITEM_SIZE
CL_INVALID_GLOBAL_OFFSET = _spatialnde2.CL_INVALID_GLOBAL_OFFSET
CL_INVALID_EVENT_WAIT_LIST = _spatialnde2.CL_INVALID_EVENT_WAIT_LIST
CL_INVALID_EVENT = _spatialnde2.CL_INVALID_EVENT
CL_INVALID_OPERATION = _spatialnde2.CL_INVALID_OPERATION
CL_INVALID_GL_OBJECT = _spatialnde2.CL_INVALID_GL_OBJECT
CL_INVALID_BUFFER_SIZE = _spatialnde2.CL_INVALID_BUFFER_SIZE
CL_INVALID_MIP_LEVEL = _spatialnde2.CL_INVALID_MIP_LEVEL
CL_INVALID_GLOBAL_WORK_SIZE = _spatialnde2.CL_INVALID_GLOBAL_WORK_SIZE
CL_INVALID_PROPERTY = _spatialnde2.CL_INVALID_PROPERTY
CL_INVALID_IMAGE_DESCRIPTOR = _spatialnde2.CL_INVALID_IMAGE_DESCRIPTOR
CL_INVALID_COMPILER_OPTIONS = _spatialnde2.CL_INVALID_COMPILER_OPTIONS
CL_INVALID_LINKER_OPTIONS = _spatialnde2.CL_INVALID_LINKER_OPTIONS
CL_INVALID_DEVICE_PARTITION_COUNT = _spatialnde2.CL_INVALID_DEVICE_PARTITION_COUNT
CL_INVALID_PIPE_SIZE = _spatialnde2.CL_INVALID_PIPE_SIZE
CL_INVALID_DEVICE_QUEUE = _spatialnde2.CL_INVALID_DEVICE_QUEUE
class cl_command_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_command_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_command_queue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cl_command_queue
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cl_command_queue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cl_command_queue_swigregister = _spatialnde2.cl_command_queue_swigregister
cl_command_queue_swigregister(cl_command_queue)

class cl_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_context, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cl_context
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cl_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cl_context_swigregister = _spatialnde2.cl_context_swigregister
cl_context_swigregister(cl_context)

class cl_device_id(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_device_id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_device_id, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cl_device_id
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cl_device_id()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cl_device_id_swigregister = _spatialnde2.cl_device_id_swigregister
cl_device_id_swigregister(cl_device_id)

class cl_program(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_program, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_program, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cl_program
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cl_program()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cl_program_swigregister = _spatialnde2.cl_program_swigregister
cl_program_swigregister(cl_program)

class cl_kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_kernel, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spatialnde2.delete_cl_kernel
    __del__ = lambda self: None

    def __init__(self):
        this = _spatialnde2.new_cl_kernel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
cl_kernel_swigregister = _spatialnde2.cl_kernel_swigregister
cl_kernel_swigregister(cl_kernel)


def clCreateCommandQueue(arg1, arg2, arg3):
    return _spatialnde2.clCreateCommandQueue(arg1, arg2, arg3)
clCreateCommandQueue = _spatialnde2.clCreateCommandQueue
CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = _spatialnde2.CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE
CL_QUEUE_PROFILING_ENABLE = _spatialnde2.CL_QUEUE_PROFILING_ENABLE
CL_QUEUE_ON_DEVICE = _spatialnde2.CL_QUEUE_ON_DEVICE
CL_QUEUE_ON_DEVICE_DEFAULT = _spatialnde2.CL_QUEUE_ON_DEVICE_DEFAULT

def clCreateKernel(arg1, arg2):
    return _spatialnde2.clCreateKernel(arg1, arg2)
clCreateKernel = _spatialnde2.clCreateKernel

def clEnqueueNDRangeKernelArrays(queue, kern, arg3, arg4, arg5, waitevents, numwaitevents):
    return _spatialnde2.clEnqueueNDRangeKernelArrays(queue, kern, arg3, arg4, arg5, waitevents, numwaitevents)
clEnqueueNDRangeKernelArrays = _spatialnde2.clEnqueueNDRangeKernelArrays

def clEnqueueNDRangeKernel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _spatialnde2.clEnqueueNDRangeKernel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
clEnqueueNDRangeKernel = _spatialnde2.clEnqueueNDRangeKernel
class opencl_event_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opencl_event_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opencl_event_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spatialnde2.opencl_event_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spatialnde2.opencl_event_vector___nonzero__(self)

    def __bool__(self):
        return _spatialnde2.opencl_event_vector___bool__(self)

    def __len__(self):
        return _spatialnde2.opencl_event_vector___len__(self)

    def __getslice__(self, i, j):
        return _spatialnde2.opencl_event_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spatialnde2.opencl_event_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spatialnde2.opencl_event_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spatialnde2.opencl_event_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spatialnde2.opencl_event_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spatialnde2.opencl_event_vector___setitem__(self, *args)

    def pop(self):
        return _spatialnde2.opencl_event_vector_pop(self)

    def append(self, x):
        return _spatialnde2.opencl_event_vector_append(self, x)

    def empty(self):
        return _spatialnde2.opencl_event_vector_empty(self)

    def size(self):
        return _spatialnde2.opencl_event_vector_size(self)

    def swap(self, v):
        return _spatialnde2.opencl_event_vector_swap(self, v)

    def begin(self):
        return _spatialnde2.opencl_event_vector_begin(self)

    def end(self):
        return _spatialnde2.opencl_event_vector_end(self)

    def rbegin(self):
        return _spatialnde2.opencl_event_vector_rbegin(self)

    def rend(self):
        return _spatialnde2.opencl_event_vector_rend(self)

    def clear(self):
        return _spatialnde2.opencl_event_vector_clear(self)

    def get_allocator(self):
        return _spatialnde2.opencl_event_vector_get_allocator(self)

    def pop_back(self):
        return _spatialnde2.opencl_event_vector_pop_back(self)

    def erase(self, *args):
        return _spatialnde2.opencl_event_vector_erase(self, *args)

    def __init__(self, *args):
        this = _spatialnde2.new_opencl_event_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spatialnde2.opencl_event_vector_push_back(self, x)

    def front(self):
        return _spatialnde2.opencl_event_vector_front(self)

    def back(self):
        return _spatialnde2.opencl_event_vector_back(self)

    def assign(self, n, x):
        return _spatialnde2.opencl_event_vector_assign(self, n, x)

    def resize(self, *args):
        return _spatialnde2.opencl_event_vector_resize(self, *args)

    def insert(self, *args):
        return _spatialnde2.opencl_event_vector_insert(self, *args)

    def reserve(self, n):
        return _spatialnde2.opencl_event_vector_reserve(self, n)

    def capacity(self):
        return _spatialnde2.opencl_event_vector_capacity(self)
    __swig_destroy__ = _spatialnde2.delete_opencl_event_vector
    __del__ = lambda self: None
opencl_event_vector_swigregister = _spatialnde2.opencl_event_vector_swigregister
opencl_event_vector_swigregister(opencl_event_vector)


def get_opencl_context(query, need_doubleprec, pfn_notify, user_data):
    return _spatialnde2.get_opencl_context(query, need_doubleprec, pfn_notify, user_data)
get_opencl_context = _spatialnde2.get_opencl_context

def get_opencl_program(context, device, program_source):
    return _spatialnde2.get_opencl_program(context, device, program_source)
get_opencl_program = _spatialnde2.get_opencl_program
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spatialnde2.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spatialnde2.StringVector___nonzero__(self)

    def __bool__(self):
        return _spatialnde2.StringVector___bool__(self)

    def __len__(self):
        return _spatialnde2.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _spatialnde2.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spatialnde2.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spatialnde2.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spatialnde2.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spatialnde2.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spatialnde2.StringVector___setitem__(self, *args)

    def pop(self):
        return _spatialnde2.StringVector_pop(self)

    def append(self, x):
        return _spatialnde2.StringVector_append(self, x)

    def empty(self):
        return _spatialnde2.StringVector_empty(self)

    def size(self):
        return _spatialnde2.StringVector_size(self)

    def swap(self, v):
        return _spatialnde2.StringVector_swap(self, v)

    def begin(self):
        return _spatialnde2.StringVector_begin(self)

    def end(self):
        return _spatialnde2.StringVector_end(self)

    def rbegin(self):
        return _spatialnde2.StringVector_rbegin(self)

    def rend(self):
        return _spatialnde2.StringVector_rend(self)

    def clear(self):
        return _spatialnde2.StringVector_clear(self)

    def get_allocator(self):
        return _spatialnde2.StringVector_get_allocator(self)

    def pop_back(self):
        return _spatialnde2.StringVector_pop_back(self)

    def erase(self, *args):
        return _spatialnde2.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _spatialnde2.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spatialnde2.StringVector_push_back(self, x)

    def front(self):
        return _spatialnde2.StringVector_front(self)

    def back(self):
        return _spatialnde2.StringVector_back(self)

    def assign(self, n, x):
        return _spatialnde2.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _spatialnde2.StringVector_resize(self, *args)

    def insert(self, *args):
        return _spatialnde2.StringVector_insert(self, *args)

    def reserve(self, n):
        return _spatialnde2.StringVector_reserve(self, n)

    def capacity(self):
        return _spatialnde2.StringVector_capacity(self)
    __swig_destroy__ = _spatialnde2.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _spatialnde2.StringVector_swigregister
StringVector_swigregister(StringVector)

# This file is compatible with both classic and new-style classes.


