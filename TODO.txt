 * Add pendingWriteLock to lockmanager so that the read locks cannot starve out the write locks.
    * Write locks must wait for all the read locks to finish but if the user keeps adding read locks that never happens
    * ***!!! NEED TO CHECK IF THIS IS ACTUALLY NECESSARY 

 * Dataguzzler-python module contexts precede recording data in the locking order. Make a hook for the dataguzzler-python module context switcher to call when switching into a context to check if any recording locks are held by the current thread, and diagnose the error. If this is not implemented there is the risk of hard-to-diagnose random deadlocks if dataguzzler-python modules make external calls to other modules while holding a spatialnde2 recording lock. (Similarly perhaps implement a wrapped lock within dataguzzler-python with similar behavior for intra-module locks?)

 * Intelligent math function dispatch: Figuring out how many threads to delegate to a particular parallel algorithm

 * Windows shared memory implementation
 * Documentation
 * Synchronization of waveform database between multiple processes and/or multiple computers.
 * Improved bounding box library (bounding_hyperboxes.hpp)
 * C API wrapper for better ABI compatibility
 * Expression parser for defining math functions and/or coordinate transform operations. 
 
